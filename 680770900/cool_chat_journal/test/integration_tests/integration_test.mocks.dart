// Mocks generated by Mockito 5.4.0 from annotations
// in cool_chat_journal/test/integration_tests/integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;

import 'package:bloc/bloc.dart' as _i8;
import 'package:cool_chat_journal/data/models/chat.dart' as _i7;
import 'package:cool_chat_journal/data/provider/storage_provider.dart' as _i4;
import 'package:cool_chat_journal/presentation/home_page/home_cubit.dart'
    as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_1 extends _i1.SmartFake implements _i3.HomeState {
  _FakeHomeState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StorageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageProvider extends _i1.Mock implements _i4.StorageProvider {
  MockStorageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_0(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.User);
  @override
  _i5.Future<void> upload({
    required String? filename,
    required _i6.Uint8List? data,
    String? directory = r'images',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upload,
          [],
          {
            #filename: filename,
            #data: data,
            #directory: directory,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i6.Uint8List> download({
    required String? filename,
    String? directory = r'images',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [],
          {
            #filename: filename,
            #directory: directory,
          },
        ),
        returnValue: _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i5.Future<_i6.Uint8List>);
  @override
  _i5.Future<void> delete({
    required String? filename,
    String? directory = r'images',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #filename: filename,
            #directory: directory,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i3.HomeCubit {
  MockHomeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.HomeState);
  @override
  _i5.Stream<_i3.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.HomeState>.empty(),
      ) as _i5.Stream<_i3.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void addChat(_i7.Chat? chat) => super.noSuchMethod(
        Invocation.method(
          #addChat,
          [chat],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deleteChat(String? chatId) => super.noSuchMethod(
        Invocation.method(
          #deleteChat,
          [chatId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void editChat(_i7.Chat? chat) => super.noSuchMethod(
        Invocation.method(
          #editChat,
          [chat],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void switchChatPinning(_i7.Chat? chat) => super.noSuchMethod(
        Invocation.method(
          #switchChatPinning,
          [chat],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i8.Change<_i3.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
