// Mocks generated by Mockito 5.4.0 from annotations
// in cool_chat_journal/test/unit_tests/events_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i7;

import 'package:cool_chat_journal/data/models/models.dart' as _i5;
import 'package:cool_chat_journal/data/provider/database_provider.dart' as _i3;
import 'package:cool_chat_journal/data/provider/storage_provider.dart' as _i6;
import 'package:cool_chat_journal/data/repository/tags_repository.dart' as _i8;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseProvider extends _i1.Mock implements _i3.DatabaseProvider {
  MockDatabaseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_0(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.User);
  @override
  _i4.Stream<List<_i5.Chat>> get chatsStream => (super.noSuchMethod(
        Invocation.getter(#chatsStream),
        returnValue: _i4.Stream<List<_i5.Chat>>.empty(),
      ) as _i4.Stream<List<_i5.Chat>>);
  @override
  _i4.Stream<List<_i5.Event>> get eventsStream => (super.noSuchMethod(
        Invocation.getter(#eventsStream),
        returnValue: _i4.Stream<List<_i5.Event>>.empty(),
      ) as _i4.Stream<List<_i5.Event>>);
  @override
  _i4.Stream<List<_i5.Category>> get categoriesStream => (super.noSuchMethod(
        Invocation.getter(#categoriesStream),
        returnValue: _i4.Stream<List<_i5.Category>>.empty(),
      ) as _i4.Stream<List<_i5.Category>>);
  @override
  _i4.Stream<List<_i5.Tag>> get tagsStream => (super.noSuchMethod(
        Invocation.getter(#tagsStream),
        returnValue: _i4.Stream<List<_i5.Tag>>.empty(),
      ) as _i4.Stream<List<_i5.Tag>>);
  @override
  _i4.Future<List<Map<String, dynamic>>> read<T>(
          {required String? tableName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#tableName: tableName},
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);
  @override
  _i4.Future<void> add({
    required Map<String, dynamic>? json,
    required String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [],
          {
            #json: json,
            #tableName: tableName,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> delete({
    required String? id,
    required String? tableName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #id: id,
            #tableName: tableName,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [StorageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageProvider extends _i1.Mock implements _i6.StorageProvider {
  MockStorageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_0(
          this,
          Invocation.getter(#user),
        ),
      ) as _i2.User);
  @override
  _i4.Future<void> upload({
    required String? filename,
    required _i7.Uint8List? data,
    String? directory = r'images',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upload,
          [],
          {
            #filename: filename,
            #data: data,
            #directory: directory,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i7.Uint8List> download({
    required String? filename,
    String? directory = r'images',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [],
          {
            #filename: filename,
            #directory: directory,
          },
        ),
        returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i4.Future<_i7.Uint8List>);
  @override
  _i4.Future<void> delete({
    required String? filename,
    String? directory = r'images',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #filename: filename,
            #directory: directory,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [TagsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagsRepository extends _i1.Mock implements _i8.TagsRepository {
  MockTagsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.Tag>> get tagsStream => (super.noSuchMethod(
        Invocation.getter(#tagsStream),
        returnValue: _i4.Stream<List<_i5.Tag>>.empty(),
      ) as _i4.Stream<List<_i5.Tag>>);
  @override
  _i4.Future<void> addTag(String? rawValue) => (super.noSuchMethod(
        Invocation.method(
          #addTag,
          [rawValue],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteLink(String? tagId) => (super.noSuchMethod(
        Invocation.method(
          #deleteLink,
          [tagId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
